plugins {
    id 'idea'
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '2.0.86'
    id 'me.modmuss50.mod-publish-plugin' version '0.4.5'
}

def secrets = new Properties()
if (file("./secrets.properties").exists()) {
    file("./secrets.properties").withInputStream {
        stream -> secrets.load(stream)
    }
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

// Mojang ships Java 21 to end users starting in 1.20.5, so mods should target Java 21.
java.toolchain.languageVersion = JavaLanguageVersion.of(21)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
neoForge {
    version = neoforge_version

    validateAccessTransformers = true

    parchment {
        mappingsVersion = parchment_version
        minecraftVersion = parchment_minecraft_version
    }

    runs {
        // applies to all the run configs below
        configureEach {
            gameDirectory = project.file('run')

            systemProperty 'forge.logging.markers', 'REGISTRIES'

            logLevel = org.slf4j.event.Level.DEBUG

            //Allows for reloading the project during runtime with compatible jvm
            jvmArgument "-XX:+AllowEnhancedClassRedefinition"

            systemProperty "mixin.env.remapRefMap", "true"
            systemProperty "mixin.env.refMapRemappingFile", "${projectDir}/build/createSrgToMcp/output.srg"
        }

        client {
            client()

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()

            gameDirectory = project.file('run-server')
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        gameTestServer {
            type = "gameTestServer"

            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()

            gameDirectory = project.file('run-data')
            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath(), '--existing-mod', 'create'
        }
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you
    maven {
        // Create, Ponder, Flywheel
        url = "https://maven.createmod.net"
    }
    maven {
        // Registrate
        url = "https://maven.tterrag.com"
    }
    maven {
        // ForgeConfigAPIPort
        url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/"
    }
    maven {
        // location of the maven that hosts JEI files before January 2023
        name = "Progwml6's maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        name = "NeoForge maven"
        url = "https://maven.neoforged.net/releases"
    }
    maven {
        name = "Spongepowered maven"
        url = "https://repo.spongepowered.org/repository/maven-public/"
    }
    maven {
        url "https://cursemaven.com"
    }
    maven {
        url = "https://mvn.devos.one/snapshots/"
    }
    maven {
        url = "https://mvn.devos.one/releases/"
    }

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html#sub:flat_dir_resolver
    // flatDir {
    //     dir 'libs'
    // }
}

dependencies {
    implementation "net.neoforged:neoforge:${neoforge_version}"
    implementation("com.simibubi.create:create-${minecraft_version}:${create_version}:slim") {
        transitive = false
    }
    implementation("net.createmod.ponder:Ponder-NeoForge-${minecraft_version}:${ponder_version}")
    implementation("dev.engine-room.flywheel:flywheel-neoforge-${flywheel_minecraft_version}:${flywheel_version}")
    compileOnly("dev.engine-room.flywheel:flywheel-neoforge-api-${flywheel_minecraft_version}:${flywheel_version}")
    implementation("com.tterrag.registrate:Registrate:${registrate_version}")

    compileOnly("mezz.jei:jei-${jei_minecraft_version}-common-api:${jei_version}")
    compileOnly("mezz.jei:jei-${jei_minecraft_version}-neoforge-api:${jei_version}")
    // at runtime, use the full JEI jar for Forge
    runtimeOnly("mezz.jei:jei-${jei_minecraft_version}-neoforge:${jei_version}")

    // references to other mods to debug compatibility
//    implementation ("curse.maven:create-steam-n-rails-688231:5331300")
//    implementation ("curse.maven:botarium-704113:5118353")
//    implementation ("curse.maven:create-new-age-905861:5080957")
//    implementation ("curse.maven:cloth-config-348521:4973441")
//    implementation ("curse.maven:appleskin-248787:4770828")
//    implementation ("curse.maven:betterf3-401648:4863626")

    implementation(jarJar("io.github.llamalad7:mixinextras-neoforge:0.4.1"))
}

processResources {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    filteringCharset = 'UTF-8'

    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neoforge_version       : neoforge_version,
            neoforge_version_range : neoforge_version_range,
            loader_version_range   : loader_version_range,
            create_version_range   : create_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)

    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

wrapper {
    gradleVersion = '8.10.1'
    distributionType = Wrapper.DistributionType.BIN
}

publishMods {
    changelog = "## NOTE: Create: Power Loader 2.0.0 or above only works with Create 6.0.0 or above!\n\nCheck out the detailed changelog at https://github.com/hlysine/create_power_loader/blob/main/CHANGELOG.md"
    type = STABLE
    file = jar.archiveFile
    modLoaders.add("neoforge")

    github {
        accessToken = secrets.GITHUB_TOKEN
        repository = "hlysine/create_power_loader"
        commitish = "main"
    }

    modrinth {
        accessToken = secrets.MODRINTH_TOKEN
        projectId = "wPQ6GgFE"
        minecraftVersions.add(minecraft_version)

        requires {
            id = "LNytGWDc"
        }
        optional {
            id = "u6dRKJwZ"
        }
    }

    curseforge {
        accessToken = secrets.CURSEFORGE_TOKEN
        projectId = "936020"
        minecraftVersions.add(minecraft_version)
    }
}